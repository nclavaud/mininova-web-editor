{"version":3,"sources":["components/NotSupported.js","App.js","serviceWorker.js","index.js"],"names":["NotSupported","href","App","useState","midiSupport","setMidiSupport","devices","setDevices","selectedDevice","setSelectedDevice","useEffect","detectDevices","access","console","log","found","outputs","values","output","next","done","push","value","navigator","requestMIDIAccess","then","onstatechange","e","device","R","nrpn","msb","lsb","sendMessage","msg","send","messages","forEach","map","key","id","name","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gOAWeA,MATf,WACE,OACE,6BACE,gFACA,sHAA2F,uBAAGC,KAAK,qFAAR,gCAA3F,OCqFSC,MAvFf,WAAgB,IAAD,EACyBC,oBAAS,GADlC,mBACNC,EADM,KACOC,EADP,OAEiBF,mBAAS,MAF1B,mBAENG,EAFM,KAEGC,EAFH,OAG+BJ,mBAAS,MAHxC,mBAGNK,EAHM,KAGUC,EAHV,KAqCb,GA3BAC,qBAAU,WACR,IAAMC,EAAgB,SAAAC,GACpBC,QAAQC,IAAI,qBAKZ,IAHA,IAAMC,EAAQ,GACRC,EAAUJ,EAAOI,QAAQC,SAC3BC,EAASF,EAAQG,QACbD,EAAOE,MACbL,EAAMM,KAAKH,EAAOI,OAClBJ,EAASF,EAAQG,OAEnBZ,EAAWQ,IAGRQ,UAAUC,kBAKfD,UAAUC,oBAAoBC,MAAK,SAAAb,GACjCA,EAAOc,cAAgB,SAAAC,GACrBhB,EAAcC,IAEhBD,EAAcC,MARdP,GAAe,KAUhB,KAEED,EACH,OAAO,kBAAC,EAAD,MAGT,GAAI,OAASE,EACX,OAAO,0DAGT,IAAMsB,EAASC,IAAOA,IAAS,KAAMrB,GAAtBqB,CAAuCvB,GAMhDwB,EAAO,SAACC,EAAKC,EAAKV,GAAX,MAAqB,CAChC,CA/CS,IACM,GA8CAS,GACf,CAhDS,IAEM,GA8CAC,GACf,CAjDS,IAGM,EA8CAV,KAGXW,EAAc,SAAAC,GAAG,OAAIN,EAAOO,KAAKD,IACjCC,EAAO,SAAAC,GAAQ,OAAIA,EAASC,QAAQJ,IAM1C,OACE,6BACE,iDACA,4BACG3B,EAAQgC,KAAI,SAAAV,GAAM,OACjB,wBAAIW,IAAKX,EAAOY,IACbZ,EAAOa,KACPb,EAAOY,KAAOhC,EACX,cACA,4BAAQkC,QAAS,kBAAMjC,EAAkBmB,EAAOY,MAAhD,eAKTZ,GAAU,oCACT,4BAAQc,QAnBO,kBAAMP,EAbI,CAC7B,CA3CS,IAuDwB,GAAI,OAmBjC,iBACA,4BAAQO,QAnBM,kBAAMP,EAAKL,EAAK,EAAG,IAAK,OAmBtC,UACA,4BAAQY,QAnBQ,kBAAMP,EAAKL,EAAK,EAAG,IAAK,OAmBxC,cCzEYa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB7B,WACrBA,UAAU8B,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,a","file":"static/js/main.31fe679b.chunk.js","sourcesContent":["import React from 'react';\n\nfunction NotSupported() {\n  return (\n    <div>\n      <p>It looks like your browser does not support MIDI.</p>\n      <p>MIDI access is an experimental technology. Check the list of compatible browsers in the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess#Browser_compatibility\">Browser compatibility table </a>.</p>\n    </div>\n  );\n}\n\nexport default NotSupported;\n","import * as R from 'ramda';\nimport React, { useState, useEffect } from 'react';\nimport NotSupported from './components/NotSupported.js';\n\nfunction App() {\n  const [midiSupport, setMidiSupport] = useState(true);\n  const [devices, setDevices] = useState(null);\n  const [selectedDevice, setSelectedDevice] = useState(null);\n\n  const CC = 0xB0;\n  const NRPN_MSB = 0x63;\n  const NRPN_LSB = 0x62;\n  const NRPN_VAL = 0x06;\n\n  useEffect(() => {\n    const detectDevices = access => {\n      console.log('Detecting devices');\n\n      const found = [];\n      const outputs = access.outputs.values();\n      let output = outputs.next();\n      while (!output.done) {\n        found.push(output.value);\n        output = outputs.next();\n      }\n      setDevices(found);\n    };\n\n    if (!navigator.requestMIDIAccess) {\n      setMidiSupport(false);\n      return;\n    }\n\n    navigator.requestMIDIAccess().then(access => {\n      access.onstatechange = e => {\n        detectDevices(access);\n      }\n      detectDevices(access);\n    });\n  }, []);\n\n  if (!midiSupport) {\n    return <NotSupported />;\n  }\n\n  if (null === devices) {\n    return <div>Detecting MIDI devices...</div>;\n  }\n\n  const device = R.find(R.propEq('id', selectedDevice))(devices);\n\n  const cc = (control, value) => [\n    [CC, control, value]\n  ];\n\n  const nrpn = (msb, lsb, value) => [\n    [CC, NRPN_MSB, msb],\n    [CC, NRPN_LSB, lsb],\n    [CC, NRPN_VAL, value],\n  ];\n\n  const sendMessage = msg => device.send(msg);\n  const send = messages => messages.forEach(sendMessage);\n\n  const changeOctave = () => send(cc(13, 0));\n  const activateArp = () => send(nrpn(0, 122, 47));\n  const deactivateArp = () => send(nrpn(0, 122, 46));\n\n  return (\n    <div>\n      <p>Available devices:</p>\n      <ul>\n        {devices.map(device => (\n          <li key={device.id}>\n            {device.name}\n            {device.id === selectedDevice\n              ? ' (selected)'\n              : <button onClick={() => setSelectedDevice(device.id)}>select</button>\n            }\n          </li>\n        ))}\n      </ul>\n      {device && <>\n        <button onClick={changeOctave}>Change octave</button>\n        <button onClick={activateArp}>Arp ON</button>\n        <button onClick={deactivateArp}>Arp OFF</button>\n      </>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}